package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/NhanThanhHuynh/gqlgen1/graph/model"
	"github.com/dchest/uniuri"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	fmt.Println(input, "===================ctx==============")
	todoInput := &model.Todo{
		ID:     uniuri.New(),
		Text:   input.Text,
		Done:   input.Done,
		UserID: input.UserID,
	}
	fmt.Println(todoInput, "todoInput")
	return r.Domain.TodoRepo.CreateTodo(todoInput)
}

// CreateTodoDetail is the resolver for the createTodoDetail field.
func (r *mutationResolver) CreateTodoDetail(ctx context.Context, input model.TodoDetailInput) (*model.TodoDetail, error) {
	panic(fmt.Errorf("not implemented: CreateTodoDetail - createTodoDetail"))
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.TodoInput) (*model.Todo, error) {
	updateTodoInput := &model.Todo{
		Text:   input.Text,
		Done:   input.Done,
		UserID: input.UserID,
	}
	fmt.Println(updateTodoInput, "updateTodoInput")
	return r.Domain.TodoRepo.UpdateTodo("id", id, updateTodoInput)
}

// UpdateTodoDetail is the resolver for the updateTodoDetail field.
func (r *mutationResolver) UpdateTodoDetail(ctx context.Context, id string, input model.TodoDetailInput) (*model.TodoDetail, error) {
	panic(fmt.Errorf("not implemented: UpdateTodoDetail - updateTodoDetail"))
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	return r.Domain.TodoRepo.DeleteTodo("id", id)
}

// DeleteTodoDetail is the resolver for the deleteTodoDetail field.
func (r *mutationResolver) DeleteTodoDetail(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTodoDetail - deleteTodoDetail"))
}

// GetTodos is the resolver for the getTodos field.
func (r *queryResolver) GetTodos(ctx context.Context, id string) (*model.Todo, error) {
	return r.Domain.TodoRepo.GetTodosById(id)
}

// GetTodoDetails is the resolver for the getTodoDetails field.
func (r *queryResolver) GetTodoDetails(ctx context.Context) ([]*model.TodoDetail, error) {
	panic(fmt.Errorf("not implemented: GetTodoDetails - getTodoDetails"))
}

// TodoDetails is the resolver for the todoDetails field.
func (r *todoResolver) TodoDetails(ctx context.Context, obj *model.Todo) ([]*model.TodoDetail, error) {
	fmt.Println(obj, "===============================obj")
	return r.Domain.TodoRepo.GetTodoDetailsByField(obj)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *todoResolver) UserID(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}
